name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, edited]


env:
  BUILD_TYPE: RelWithDebInfo
  QTEST_FUNCTION_TIMEOUT: 60000

jobs:
  linux-gcc:
    strategy:
      fail-fast: false
      matrix:
        qt_version: [ 5.15.2, 6.2.0 ]
        gcc_version: [ 10.3.0, 11.3.0 ]

    runs-on: ubuntu-20.04
    name: linux-gcc-${{ matrix.gcc_version }}-qt-${{ matrix.qt_version }}

    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

    - name: Install Qt
      run: |
        GCC_VERSION_MAJOR=$(echo ${{ matrix.gcc_version }} | cut -d '.' -f1)
        sudo add-apt-repository "deb https://ppa.launchpadcontent.net/ubuntu-toolchain-r/ppa/ubuntu focal main"
        sudo apt-get update
        sudo apt-get install -y \
          lsb-release wget software-properties-common build-essential \
          dbus dbus-x11 libgl-dev libegl-dev \
          gcc-${GCC_VERSION_MAJOR} g++-${GCC_VERSION_MAJOR} libstdc++-${GCC_VERSION_MAJOR}-dev

        pip3 install aqtinstall~=2.1

        aqt install-qt -O /opt/qt linux desktop ${{ matrix.qt_version }} gcc_64 --archives qtbase icu

        QT_BASE_DIR="/opt/qt/${{ matrix.qt_version }}/gcc_64/"
        echo "$QT_BASE_DIR/bin" >> $GITHUB_PATH
        echo "LD_LIBRARY_PATH=$QT_BASE_DIR/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "XDG_DATA_DIRS=$QT_BASE_DIR/share:$XDG_DATA_DIRS" >> $GITHUB_ENV

    - name: Create Build Environment
      run: |
        cmake -E make_directory ${{ github.workspace }}/build

    - name: Configure CMake
      shell: bash
      run: |
        cd ${{ github.workspace }}/build
        GCC_VERSION_MAJOR=$(echo ${{ matrix.gcc_version }} | cut -d '.' -f1)
        QT_VERSION_MAJOR=$(echo ${{ matrix.qt_version }} | cut -d'.' -f1)
        cmake $GITHUB_WORKSPACE \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DUSE_QT_VERSION=$QT_VERSION_MAJOR \
          -DQCORO_WITH_QTDBUS=ON \
          -DCMAKE_CXX_COMPILER=/usr/bin/g++-${GCC_VERSION_MAJOR}

    - name: Build
      shell: bash
      run: |
        cd ${{ github.workspace }}/build
        cmake --build . --config $BUILD_TYPE --parallel $(nproc) --verbose

    - name: Test
      shell: bash
      run: |
        cd ${{ github.workspace }}/build
        QT_LOGGING_TO_CONSOLE=1 ctest -C $BUILD_TYPE --output-on-failure --verbose --output-junit linux-gcc-${{ matrix.gcc_version }}-qt-${{ matrix.qt_version }}.xml

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Unit Tests Results (linux-gcc-${{ matrix.gcc_version }}-qt-${{ matrix.qt_version }})
        path: |
          ${{ github.workspace }}/build/linux-gcc-${{ matrix.gcc_version }}-qt-${{ matrix.qt_version }}.xml

    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: build-linux-gcc-${{ matrix.gcc_version }}-qt-${{ matrix.qt_version }}
        path: build/**

  linux-clang:
    strategy:
      fail-fast: false
      matrix:
        qt_version: [ 5.15.2, 6.2.0 ]
        clang_version: [ 11, 14, 15 ]

    runs-on: ubuntu-20.04
    name: linux-clang-${{ matrix.clang_version }}-qt-${{ matrix.qt_version}}

    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

    - name: Install Qt
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          lsb-release wget software-properties-common build-essential \
          dbus dbus-x11 libgl-dev libegl-dev
        pip3 install aqtinstall~=2.1

        aqt install-qt -O /opt/qt linux desktop ${{ matrix.qt_version }} gcc_64 --archives qtbase icu

        QT_BASE_DIR="/opt/qt/${{ matrix.qt_version }}/gcc_64/"
        echo "$QT_BASE_DIR/bin" >> $GITHUB_PATH
        echo "LD_LIBRARY_PATH=$QT_BASE_DIR/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "XDG_DATA_DIRS=$QT_BASE_DIR/share:$XDG_DATA_DIRS" >> $GITHUB_ENV

    - name: Install clang
      run: |
        wget https://apt.llvm.org/llvm.sh -O llvm.sh
        chmod a+x llvm.sh
        sed -i "s/libunwind-\$LLVM_VERSION-dev//" llvm.sh
        sudo ./llvm.sh ${{ matrix.clang_version }} all

    - name: Create Build Environment
      run: |
        cmake -E make_directory ${{ github.workspace }}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{ github.workspace }}/build
      run: |
        QT_VERSION_MAJOR=$(echo ${{ matrix.qt_version }} | cut -d'.' -f1)
        cmake $GITHUB_WORKSPACE \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DUSE_QT_VERSION=$QT_VERSION_MAJOR \
          -DQCORO_WITH_DBUS=ON \
          -DQCORO_WITH_ASAN=ON \
          -DCMAKE_CXX_COMPILER=/usr/bin/clang++-${{ matrix.clang_version }}

    - name: Build
      working-directory: ${{ github.workspace }}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE --parallel $(nproc) --verbose

    - name: Test
      working-directory: ${{ github.workspace }}/build
      shell: bash
      run: QT_LOGGING_TO_CONSOLE=1 ctest -C $BUILD_TYPE --output-on-failure --verbose --output-junit linux-clang-${{ matrix.clang_version }}-qt-${{ matrix.qt_version }}.xml

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Unit Tests Results (linux-clang-${{ matrix.clang_version }}-qt-${{ matrix.qt_version }})
        path: |
          ${{ github.workspace }}/build/linux-clang-${{ matrix.clang_version }}-qt-${{ matrix.qt_version }}.xml

    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: build-linux-clang-${{ matrix.clang_version }}-qt-${{ matrix.qt_version }}
        path: build/**

  windows-msvc:
    strategy:
      fail-fast: false
      matrix:
        qt_version: [ 5.15.2, 6.2.0 ]

    runs-on: windows-2022
    name: window-msvc-qt-${{ matrix.qt_version }}

    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

    - name: Install Qt
      uses: ./.github/actions/install-qt
      with:
        qt_version: ${{ matrix.qt_version }}
        compiler: msvc

    - name: Create Build Environment
      run: |
        cmake -E make_directory ${{ github.workspace }}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{ github.workspace }}/build
      run: |
        QT_VERSION_MAJOR=$(echo ${{ matrix.qt_version }} | cut -d'.' -f1)
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BULD_TYPE -DUSE_QT_VERSION=$QT_VERSION_MAJOR -DQCORO_WITH_DBUS=ON

    - name: Add ASAN DLL directory to PATH
      shell: cmd
      run: |
        setlocal enabledelayedexpansion
        for /f "usebackq tokens=*" %%i in (`"%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do (set InstallDir=%%i)
        if exist "%InstallDir%\VC\Auxiliary\Build\Microsoft.VCToolsVersion.default.txt" (
          set /p Version=<"%InstallDir%\VC\Auxiliary\Build\Microsoft.VCToolsVersion.default.txt"
          set Version=!Version: =!
        )
        if not "%Version%" == "" (
          set /p="%InstallDir%\VC\Tools\MSVC\%Version%\bin\HostX64\x64" < nul > %GITHUB_PATH%
          exit 0
        )

    - name: Build
      working-directory: ${{ github.workspace }}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE --parallel 4 --verbose

    - name: Test
      working-directory: ${{ github.workspace }}/build
      shell: bash
      run: QT_LOGGING_TO_CONSOLE=1 ctest -C $BUILD_TYPE --output-on-failure --verbose --output-junit windows-msvc-qt-${{ matrix.qt_version }}.xml

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Unit Tests Results (windows-msvc-qt-${{ matrix.qt_version }})
        path: |
          ${{ github.workspace }}/build/windows-msvc-qt-${{ matrix.qt_version }}.xml

    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: build-windows-msvc-qt-${{ matrix.qt_version }}
        path: build/**

  apple-clang:
    strategy:
      fail-fast: false
      matrix:
        qt_version: [ 5.15.2, 6.2.0 ]

    runs-on: macos-11
    name: apple-clang-qt-${{ matrix.qt_version }}

    steps:
    - name: Checkout sources
      uses: actions/checkout@v2

    - name: Install Qt
      uses: ./.github/actions/install-qt
      with:
        qt_version: ${{ matrix.qt_version }}
        compiler: apple-clang

    - name: Create Build Environment
      run: |
        cmake -E make_directory ${{ github.workspace }}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{ github.workspace }}/build
      run: |
        QT_VERSION_MAJOR=$(echo ${{ matrix.qt_version }} | cut -d'.' -f1)
        cmake $GITHUB_WORKSPACE \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DUSE_QT_VERSION=$QT_VERSION_MAJOR \
          -DQCORO_WITH_DBUS=ON \
          -DQCORO_WITH_ASAN=ON

    - name: Build
      working-directory: ${{ github.workspace }}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE --parallel $(nproc) --verbose

    - name: Test
      working-directory: ${{ github.workspace }}/build
      shell: bash
      run: QT_LOGGING_TO_CONSOLE=1 ctest -C $BUILD_TYPE --output-on-failure --verbose --output-junit apple-clang-qt-${{ matrix.qt_version }}.xml

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Unit Tests Results (apple-clang-qt-${{ matrix.qt_version }})
        path: |
          ${{ github.workspace }}/build/apple-clang-qt-${{ matrix.qt_version }}.xml

    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: build-apple-clang-qt-${{ matrix.qt_version }}
        path: build/**

  event_file:
    name: "Event File"
    runs-on: ubuntu-latest
    steps:
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        name: Event File
        path: ${{ github.event_path }}
